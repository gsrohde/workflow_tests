# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions

name: R-CMD-check

on:
  push:
  pull_request:
    branches:
      - master
  workflow_dispatch:
    # When running manually, allow users to customize the run:
    inputs:
      check-manual:
        description: 'Check the manual (yes/no)'
        required: false
        default: 'no'
      check-vignettes:
        description: 'Check the vignettes (yes/no)'
        required: false
        default: 'no'
      run-tests:
        description: 'Run the tests (yes/no)'
        required: false
        default: 'yes'
      check-examples:
        description: 'Check the examples (yes/no)'
        required: false
        default: 'yes'

      check-windows:
        description: 'Test build on Windows (yes/no)'
        required: false
        default: 'no'
      check-mac:
        description: 'Test build on MacOS (yes/no)'
        required: false
        default: 'no'
      check-r-release-version-on-ubuntu:
        description: 'Test build on Ubuntu using the release version of R (yes/no)'
        required: false
        default: 'yes'
      check-r-devel-version-on-ubuntu:
        description: 'Test build on Ubuntu using the development version of R (yes/no)'
        required: false
        default: 'no'

env:
  valid-input-values: '[ "yes", "y", "no", "n" ]'
  yes-values: '[ "yes", "y" ]'
  no-values: '[ "no", "n" ]'

jobs:
  get_configuration:
    name: Get run configuration
    runs-on: ubuntu-latest
    outputs:
      check-manual: ${{ steps.set_outputs.outputs.check-manual }}    
      check-vignettes: ${{ steps.set_outputs.outputs.check-vignettes }}
      run-tests: ${{ steps.set_outputs.outputs.run-tests }}    
      check-examples: ${{ steps.set_outputs.outputs.check-examples }}
      check-windows: ${{ steps.set_outputs.outputs.check-windows }}
      check-mac: ${{ steps.set_outputs.outputs.check-mac }}    
      check-r-release-version-on-ubuntu: ${{ steps.set_outputs.outputs.check-r-release-version-on-ubuntu }}    
      check-r-devel-version-on-ubuntu: ${{ steps.set_outputs.outputs.check-r-devel-version-on-ubuntu }}
    steps:
      - name: Validate Input
        run: |
          echo "ALL_INPUTS_VALID=${{
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-manual) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-vignettes) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.run-tests) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-examples) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-windows) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-mac) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-r-release-version-on-ubuntu) &&
            contains(fromJSON(env.valid-input-values), github.event.inputs.check-r-devel-version-on-ubuntu)
          }}" >> $GITHUB_ENV
      - name: Debug validity check
        run: |
          echo "${{ github.event_name }}"
          echo "${{ github.event_name == 'workflow_dispatch' }}"
          echo "${{  env.ALL_INPUTS_VALID }}"
          echo "${{  env.ALL_INPUTS_VALID == 'false' }}"
      - name: Abort if invalid
        if: github.event_name == 'workflow_dispatch' && env.ALL_INPUTS_VALID == 'false'
        run: |
          echo "::error::All inputs must be either 'yes', 'y', 'no', or 'n'."
          exit 1
      - name: Set configuration variables
        id: set_outputs
        run: |
          echo "::set-output name=check-manual::${{ contains(fromJSON(env.yes-values),
                                                             github.event.inputs.check-manual) }}"
          echo "::set-output name=check-vignettes::${{ contains(fromJSON(env.yes-values),
                                                                github.event.inputs.check-vignettes) }}"
          echo "::set-output name=run-tests::${{ contains(fromJSON(env.yes-values),
                                                          github.event.inputs.run-tests) }}"
          echo "::set-output name=check-examples::${{ contains(fromJSON(env.yes-values),
                                                               github.event.inputs.check-examples) }}"
          echo "::set-output name=check-windows::${{ contains(fromJSON(env.yes-values),
                                                              github.event.inputs.check-windows) }}"
          echo "::set-output name=check-mac::${{ contains(fromJSON(env.yes-values),
                                                          github.event.inputs.check-mac) }}"
          echo "::set-output name=check-r-release-version-on-ubuntu::${{
                    contains(fromJSON(env.yes-values),
                             github.event.inputs.check-r-release-version-on-ubuntu) }}"
          echo "::set-output name=check-r-devel-version-on-ubuntu::${{
                    contains(fromJSON(env.yes-values),
                             github.event.inputs.check-r-devel-version-on-ubuntu) }}"

  debug:
    name: Debug
    needs: get_configuration
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "${{ needs.get_configuration.outputs.check-windows }}"
          echo "${{ needs.get_configuration.outputs.check-mac }}"
          echo "${{ needs.get_configuration.outputs.check-r-release-version-on-ubuntu }}"
          echo "${{ needs.get_configuration.outputs.check-r-devel-version-on-ubuntu }}"

  matrix_prep:
    name: Prepare strategy matrix
    needs: get_configuration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        name: Conditional Build Matrix
        uses: JoshuaTheMiller/conditional-build-matrix@0.0.1
        with:
          inputFile: '.github/workflows/matrix_includes_for_R-CMD-check.json'
          filter:
            '[?contains(runOnEvent, `${{ github.event_name }}`)
               || (contains(os, `"windows"`)
                   && `${{ needs.get_configuration.outputs.check-windows }}`)
               || (contains(os, `"macOS"`)
                   && `${{ needs.get_configuration.outputs.check-mac }}`)
               || (contains(os, `"ubuntu"`)
                   && ((contains(r, `"release"`)
                        && `${{ needs.get_configuration.outputs.check-r-release-version-on-ubuntu }}`)
                       || (contains(r, `"devel"`)
                           && `${{ needs.get_configuration.outputs.check-r-devel-version-on-ubuntu }}`)))]'

  # For debugging:
  display_matrix:
    name: Display strategy matrix
    needs: matrix_prep # Supplies matrix output.
    runs-on: ubuntu-latest
    steps:
    - name: Report Configuration
      env:
        MATRIX_CONTEXT: ${{ needs.matrix_prep.outputs.matrix }}
      run: |
        echo "matrix: $MATRIX_CONTEXT"

  R-CMD-check:
    name: Check R package on platform ${{ matrix.os }} using the (${{ matrix.r }}) version of R
    needs: [get_configuration, matrix_prep]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.matrix) }}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true # affects behavior of the "remotes" package's install commands
      RSPM: ${{ matrix.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Debug TinyTex test
        run: |
          echo "${{ github.event_name }}"
          echo "${{ github.event_name != 'workflow_dispatch' }}"
          echo "${{ needs.get_configuration.outputs.check-vignettes }}"
          echo "${{ needs.get_configuration.outputs.check-manual }}"
          echo "${{ github.event_name != 'workflow_dispatch' ||
                needs.get_configuration.outputs.check-vignettes == 'true' ||
                needs.get_configuration.outputs.check-manual == 'true' }}"
      - name: Maybe install TinyTex
        if: >
          github.event_name != 'workflow_dispatch'
          || needs.get_configuration.outputs.check-vignettes == 'true'
          || fromJSON(needs.get_configuration.outputs.check-manual)
        run: echo "Need TinyTex"
      - name: Check package
        run: |
          if ('${{ github.event_name }}' == 'workflow_dispatch') {
            build_args_value <- c()
            args_value <- c('--as-cran')
            if ('${{ needs.get_configuration.outputs.check-manual }}' == 'false') {
              build_args_value <- append(build_args_value, '--no-manual')
              args_value <- append(args_value, '--no-manual')
            }
            if ('${{ needs.get_configuration.outputs.check-vignettes }}' == 'false') {
              build_args_value <- append(build_args_value, '--no-build-vignettes')
              args_value <- append(args_value, '--ignore-vignettes')
            }
            if ('${{ needs.get_configuration.outputs.run-tests }}' == 'false') {
              args_value <- append(args_value, '--no-tests')
            }
            if ('${{ needs.get_configuration.outputs.check-examples }}' == 'false') {
              args_value <- append(args_value, '--no-examples')
            }
          } else {
            build_args_value <- c('--no-build-vignettes')
            args_value <- c('--as-cran', '--ignore-vignettes')
          }
          cat("Running rcmdcheck with",
                "\n  args =", args_value,
                "\n  build_args =", build_args_value,
                "\n  error_on = 'error', and",
                "\n  check_dir = 'check'\n")
        shell: Rscript {0}
